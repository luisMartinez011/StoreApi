// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StoreAPI.Data;

#nullable disable

namespace StoreAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241111051237_isconfirmedDeleted")]
    partial class isconfirmedDeleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StoreAPI.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("StoreAPI.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("StoreAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8737),
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8740),
                            Title = "Frutas"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8742),
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8742),
                            Title = "Verduras"
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8743),
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8743),
                            Title = "Electrodomesticos"
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8744),
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8744),
                            Title = "Panaderia"
                        });
                });

            modelBuilder.Entity("StoreAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8816),
                            Description = "Una manzana roja",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8817),
                            Price = 14.99,
                            Title = "Manzana"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8820),
                            Description = "Un platano amarillo",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8821),
                            Price = 16.989999999999998,
                            Title = "Platano"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8822),
                            Description = "Fresa fresca",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8822),
                            Price = 11.99,
                            Title = "Fresa"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8823),
                            Description = "Apio para ensaladas",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8823),
                            Price = 16.989999999999998,
                            Title = "Apio"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8824),
                            Description = "Lechuga para ensaladas",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8825),
                            Price = 18.989999999999998,
                            Title = "Lechuga"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8825),
                            Description = "Zanahorias para ver mejor",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8826),
                            Price = 13.99,
                            Title = "Zanahoria"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8827),
                            Description = "Refrigerador con 4 cajones y refrigeracion constante",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8827),
                            Price = 15656.99,
                            Title = "Refrigerador"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8828),
                            Description = "Para ver los partidos",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8828),
                            Price = 14543.99,
                            Title = "Television"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8829),
                            Description = "Para lavar la ropa",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8829),
                            Price = 7000.9899999999998,
                            Title = "Lavadora"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8830),
                            Description = "Dulce pan de muerto",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8830),
                            Price = 30.989999999999998,
                            Title = "Pan de Muerto"
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8831),
                            Description = "Muffin de pasas",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8831),
                            Price = 40.990000000000002,
                            Title = "Muffin"
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8832),
                            Description = "Pay de fresa",
                            Img = "",
                            ModifiedAt = new DateTime(2024, 11, 11, 5, 12, 37, 184, DateTimeKind.Utc).AddTicks(8832),
                            Price = 140.99000000000001,
                            Title = "Pay"
                        });
                });

            modelBuilder.Entity("StoreAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StoreAPI.Models.Cart", b =>
                {
                    b.HasOne("StoreAPI.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("StoreAPI.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreAPI.Models.CartItem", b =>
                {
                    b.HasOne("StoreAPI.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAPI.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreAPI.Models.Product", b =>
                {
                    b.HasOne("StoreAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StoreAPI.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("StoreAPI.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StoreAPI.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("StoreAPI.Models.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
